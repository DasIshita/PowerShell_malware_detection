import re
import os
import numpy as np
import random
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, recall_score, confusion_matrix, f1_score, roc_auc_score
from tqdm import tqdm



#from nltk.stem import WordNetLemmatizer
#stemmer = WordNetLemmatizer()


malicious_directory = '../../mspd/malicious_pure'
benign_directory = '../../mspd/powershell_benign_dataset'
mixed_malicious_directory = '../../mspd/mixed_malicious'
obfuscated_mixed_directory = '../../mspd/STRING_obfuscated_mixed'


def frequentWords(directory):
    scripts = []
    count = 800
    for filename in tqdm(list(os.scandir(directory))):
        # if count == 0:
        #     break

        if filename.is_file():
            with open(filename, encoding="ISO-8859-1") as f:
                lines = f.readlines()

            f.close()

            document = []
            
            if len(lines) == 0: #some obfuscated files are empty.
                continue

            for sen in range(0, len(lines)):
                # Remove all the special characters
                sent = re.sub(r'\W', ' ', str(lines[sen]))
                #sent = str(lines[sen])

                # remove all single characters
                #sent = re.sub(r'\s+[a-zA-Z*"$"]\s+', ' ', sent)

                # Remove single characters from the start
                sent = re.sub(r'\^[a-zA-Z*"$"]\s+', ' ', sent) 

                # Substituting multiple spaces with single space
                sent = re.sub(r'\s+', ' ', sent, flags=re.I)

                # Removing prefixed 'b'
                #sent = re.sub(r'^b\s+', '', sent)

                # Converting to Lowercase
                sent = sent.lower()
  
                document.append(sent)
                newdoc = []
                for i in range(len(document)):
                    if document[i] != ' ':
                        newdoc += document[i].split()
            count -= 1
            newdoc = ' '.join(newdoc)
            scripts.append(newdoc)

    CountVec = CountVectorizer(max_features=1500, min_df=20, max_df=0.7, stop_words=["get", "name", "string", "function", "if", "param", "test", "true", "return", "in", "not", "value", "null", "and", "or", "new"]).fit(scripts)
    vocab = CountVec.vocabulary_
    
    
    
    return vocab, scripts


    '''
    TfidfVec = TfidfVectorizer(max_features=10, min_df=2, max_df=0.7, stop_words=["get", "name", "string", "function", "if", "param", "test", "true", "return", "in", "not", "value", "null"])
    TfidfVec.fit_transform(scripts)
    return (dict(zip(TfidfVec.get_feature_names(), TfidfVec.idf_))), scripts
    
    
    '''
    


def Word2Vec(VecDictionary, scripts):
    TfidfVec = TfidfVectorizer(vocabulary=VecDictionary).fit_transform(scripts).toarray()
    signedVec = []
    for vec in TfidfVec:
        vec = vec.tolist()
        signedVec.append(vec)

    return signedVec

    
    

def generateData():
    
    #create dictionary
    VecDictionary, bScripts = frequentWords(benign_directory)
    maliDic, maliScripts = frequentWords(malicious_directory)
    dic, mixedScripts = frequentWords(mixed_malicious_directory)
    ObsDic, Obfuscripts = frequentWords(obfuscated_mixed_directory)
    
    
    #先sort好frequentｗords 从most到least frequency，之后occurances 被换成序列
    VecDictionary={k: v for k, v in sorted(maliDic.items(), key=lambda item: item[1])}
    # for item in maliDic:
    #     if item not in VecDictionary:
    #         VecDictionary[item] = len(VecDictionary)
    #     else:
    #         pass
    

    bVecData = Word2Vec(VecDictionary, bScripts)
    maliVecData = Word2Vec(VecDictionary, maliScripts)
    mixedVecData = Word2Vec(VecDictionary, mixedScripts)
    ObfusVecData = Word2Vec(VecDictionary, Obfuscripts)
    
    X = bVecData+maliVecData
    y = [0]*len(bVecData) + [1]*len(maliVecData)
    
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
    
        
    Mix_y=[1]*len(mixedVecData)+y_test
    Obs_y=[1]*len(ObfusVecData)+y_test
    
    return X_train, y_train, X_test, y_test, mixedVecData+X_test, Mix_y, Obs_y, ObfusVecData+X_test
    
#     random.shuffle(X_labeled)
#     X_train, y_train, X_test, y_test = [], [], [], []
#     for x in X_labeled:
#         X_train.append(x[:-1])
#         y_train.append(x[-1])
    
#     for x in mixedVecData:
#         X_test.append(x[:-1])
#         y_test.append(x[-1])
        

#     return np.array(X_train), np.array(X_test), np.array(y_train), np.array(y_test)

    
    



    
def Model_train_test():
    X_train, y_train, X_test, y_test, Mix_X, Mix_y, Obs_y, Obs_X = generateData()

    print("##### Finish loading Datasets #######")
    
    RFmodel = RandomForestClassifier(n_estimators=70, max_samples=8, random_state=0)
    RFmodel.fit(X_train, y_train)
    
    # y_pred = RFmodel.predict(X_test)
    # Mix_pred = RFmodel.predict(Mix_X)
    Obs_pred = RFmodel.predict(Obs_X)
    

#     print("########## Test 1 ###########")
#     print(accuracy_score(y_test, y_pred))
#     print(recall_score(y_test, y_pred, average="macro"))
#     print(precision_score(y_test, y_pred, average="macro"))
#     print(f1_score(y_test, y_pred, average="macro"))
#     print(roc_auc_score(y_test, y_pred))


#     print("########## Test 2 ###########")
#     print(accuracy_score(Mix_y, Mix_pred))
#     print(recall_score(Mix_y, Mix_pred, average="macro"))
#     print(precision_score(Mix_y, Mix_pred, average="macro"))
#     print(f1_score(Mix_y, Mix_pred, average="macro"))
#     print(roc_auc_score(Mix_y, Mix_pred))

    print("########### 3rd TEST ##############")
    print(accuracy_score(Obs_y, Obs_pred))
    print(recall_score(Obs_y, Obs_pred, average="macro"))
    print(precision_score(Obs_y, Obs_pred, average="macro"))
    print(f1_score(Obs_y, Obs_pred, average="macro"))
    print(roc_auc_score(Obs_y, Obs_pred))




if __name__ == "__main__":
    Model_train_test()
    #generateData(benign_directory, malicious_directory, mixed_malicious_directory)
    #frequentWords(benign_directory)


    
    

'''
#Generate Train Dataset
    X_labeled = []
    bfreq_words, bX = frequentWords(benign_directory)
    for x in bX:
        x = x.tolist()
        x.append(0) # label as benign
        X_labeled.append(x)
    
    mfreq_words, mX = frequentWords(malicious_directory)
    for x in mX:
        x = x.tolist()
        x.append(1) # label as malicious
        X_labeled.append(x) 

    mixfreqwords, mixedX = frequentWords(mixed_malicious_directory)
    for x in mixedX:
        x = x.tolist()
        #x.append(1)
        #X_labeled.append(x)
    X_test = mixedX
    y_test = [1] * len(X_test) #all test data are malicious.
    
        
    random.shuffle(X_labeled)
    X_train, y_train = [], []
    for x in X_labeled:
        X_train.append(x[:-1])
        y_train.append(x[-1])
    
    
    #Generate Test Dataset
    
    
    print("Finish datasets!!!!!!!!!!!!")
    return np.array(X_train), np.array(X_test), np.array(y_train), np.array(y_test)
'''
'''

Extract frequentWords_benign_dictionary from benign_corpus;
Extract frequentWords_malicous_dictionary from malicious_corpus;


Combine two dictironary together;
## e.g.: dictionary: {"a": idf_, "b":idf_, "c":idf_ ...}

benign_scriptVectors = []
for benign_script in benign_corpus:
    vector = []
    for word in benign_scripts:
        if word in dictionary.keys():
            calculate tf val of the word;
            tfidf = tf * idf_
            vector.append(tfidf)
        else:
            vector.append(0)
    benign_scriptVectors.append(vector)

malicious_scriptVectors = []
for malicious_script in malicious_corpus:
    vector = []
    for word in benign_scripts:
        if word in dictionary.keys():
            calculate tf val of the word;
            tfidf = tf * idf_
            vector.append(tfidf)
        else:
            vector.append(0)
    malicious_scriptVectors.append(vector)

'''