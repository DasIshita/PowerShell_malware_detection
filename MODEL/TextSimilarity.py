from sentence_transformers import SentenceTransformer, InputExample, losses, models,evaluation
from sklearn.ensemble import RandomForestClassifier
from torch.utils.data import DataLoader
from tqdm import tqdm
import re
import os
import numpy as np
import random
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, recall_score, confusion_matrix, f1_score, roc_auc_score
from sklearn.metrics import roc_auc_score
import torch
import matplotlib.pyplot as plt


torch.cuda.empty_cache()

malicious_directory = '../../mspd/malicious_pure'
benign_directory = '../../mspd/powershell_benign_dataset'
mixed_malicious_directory = '../../mspd/mixed_malicious'
obfuscated_mixed_directory = '../../mspd/STRING_obfuscated_mixed'

def preprocessing(directory):
    scripts = []
    count = 15
    for filename in tqdm(list(os.scandir(directory))):
        # if count == 0:
        #     break

        if filename.is_file():
            with open(filename, encoding="ISO-8859-1") as f:
                lines = f.readlines()

            f.close()

            document = []
            
            if len(lines) == 0: #some obfuscated files are empty.
                continue

            for sen in range(len(lines)):

                # Remove all the special characters
                sent = re.sub(r'\W', ' ', str(lines[sen]))
                
                #sent = str(lines[sen])
                # Remove single characters from the start
                sent = re.sub(r'\[^a-zA-Z*"$"]\s+', ' ', sent) 

                # Substituting multiple spaces with single space
                sent = re.sub(r'\s+', ' ', sent, flags=re.I)

                # Converting to Lowercase
                sent = sent.lower()
                
                if len(sent.strip()) > 0:
                    document.extend(sent.split())
  
                 #document.append(sent)
#                 newdoc = []
#                 for i in range(len(document)):
#                     if document[i] != ' ':
#                         newdoc += document[i].split()
            count -= 1
            newdoc = ' '.join(document)
            scripts.append(newdoc)
    return scripts
#Define the model. Either from scratch of by loading a pre-trained model


bscripts = preprocessing(benign_directory)
mscripts = preprocessing(malicious_directory)
Mixed = preprocessing(mixed_malicious_directory)
Obfus = preprocessing(obfuscated_mixed_directory)

X = bscripts+mscripts
y = [0]*len(bscripts) + [1]*len(mscripts)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Mix_y = [1]*len(Mixed) + y_test
Obs_y = [1]*len(Obfus) + y_test
Mixed += X_test
Obfus += X_test


def pairGenerator(scripts, labels):
    pairs = []
    for i in range(len(scripts)):
        subscripts = scripts[i+1:]
        sublabels = labels[i+1:]
        for j in range(len(subscripts)):
            if labels[i] != sublabels[j]:
                pairs.append(InputExample(texts=[scripts[i], subscripts[j]], label=0.0))
            else:
                pairs.append(InputExample(texts=[scripts[i], subscripts[j]], label=1.0))
                
    return pairs



    
train_examples = pairGenerator(X_train[:20], y_train[:20])

'''
Use of Sentence Transformer
'''
STmodel = SentenceTransformer('all-distilroberta-v1')


train_dataloader = DataLoader(train_examples, shuffle=True, batch_size=10)
train_loss = losses.CosineSimilarityLoss(STmodel)
STmodel.fit(train_objectives=[(train_dataloader, train_loss)], epochs=1, warmup_steps=10, show_progress_bar=True)



'''
Use of SGD
'''
X_train = STmodel.encode(X_train)
sgd =  LogisticRegression()
sgd.fit(X_train, y_train)



'''
Use Only SGD
'''

# X_test = STmodel.encode(X_test)
# # Mixed = STmodel.encode(Mixed)
# Obfus = STmodel.encode(Obfus)
# y_pred = sgd.predict(X_test)
# Mix_pred = sgd.predict(Mixed)
# Obs_pred = sgd.predict(Obfus)


'''
Sliding Window
'''

y_pred, Mix_pred, Obs_pred = [],[],[]
# for data in tqdm(X_test):
#     label=0
#     i=0
#     j=i+512
#     while i < len(data):
#         X_test_slice = data[i:j]
#         i+=200
#         j+=200
#         en = STmodel.encode(X_test_slice).reshape((1, 768))
#         sliceScore = sgd.predict_log_proba(en)
#         if sliceScore[0][0] < -0.85:
#             label=1
#             break
#     y_pred.append(label)
        

# for data in tqdm(Mixed):
#     label=0
#     i=0
#     j=i+512
#     while i < len(data):
#         Mixed_slice = data[i:j]
#         i+=200
#         j+=200
#         en = STmodel.encode(Mixed_slice).reshape((1, 768))
#         sliceScore = sgd.predict_log_proba(en)
#         if sliceScore[0][0] < -0.85:
#             label=1
#             break
#     Mix_pred.append(label)
    

for data in tqdm(Obfus):
    label=0
    i=0
    j=i+512
    while i < len(data):
        Obfus_slice = data[i:j]
        i+=200
        j+=200
        en = STmodel.encode(Obfus_slice).reshape((1, 768))
        sliceScore = sgd.predict_log_proba(en)
        if sliceScore[0][0] < -0.85:
            label=1
            break
    Obs_pred.append(label)
        




# print("########## Test 1 ###########")
# print(accuracy_score(y_test, y_pred))
# print(recall_score(y_test, y_pred, average="macro"))
# print(precision_score(y_test, y_pred, average="macro"))
# print(f1_score(y_test, y_pred, average="macro"))
# print(roc_auc_score(y_test, y_pred))


# print("########## Test 2 ###########")
# print('Acc. SetFit', accuracy_score(Mix_y, Mix_pred))
# print(recall_score(Mix_y, Mix_pred, average="macro"))
# print(precision_score(Mix_y, Mix_pred, average="macro"))
# print(f1_score(Mix_y, Mix_pred, average="macro"))
# print(roc_auc_score(Mix_y, Mix_pred))

print("########### TEST 3 ##############")
print(accuracy_score(Obs_y, Obs_pred))
print(recall_score(Obs_y, Obs_pred, average="macro"))
print(precision_score(Obs_y, Obs_pred, average="macro"))
print(f1_score(Obs_y, Obs_pred, average="macro"))
print(roc_auc_score(Obs_y, Obs_pred))
# '''
# Use of RF
# '''

# RFmodel = RandomForestClassifier(n_estimators=70, max_samples=8, random_state=0)
# RFmodel.fit(X_train, y_train)

# print("########## 1st TEST ###############")
# y_pred = RFmodel.predict(X_test)
# print(confusion_matrix(y_test,y_pred))
# print(classification_report(y_test,y_pred))
# print(accuracy_score(y_test, y_pred))

# print("########### 2nd TEST ##############")
# Mixed_pred = RFmodel.predict(Mixed)
# print(confusion_matrix(Mixed_eval,Mixed_pred))
# print(classification_report(Mixed_eval,Mixed_pred))
# print(accuracy_score(Mixed_eval, Mixed_pred))
